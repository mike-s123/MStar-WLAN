REST API docs

==================================================================================				
Format:
/rest?json={"addr":0,"cmd":"readInputRegister"} 

==================================================================================				
Variables:
"addr"		Required. Register or coil address, zero based, decimal/hex/octal
"cmd"		Required. Command, one of 
			"readInputRegister" 	Read a single register. Err if register not defined.
			"readInputRegisters"	Read up to 10 registers with optional "count" modifier.
			"readHoldingRegisters"	Same as "readInputRegisters"
			"readCoils"				Read coils with optional "count" modifier.
			"readDiscreteInputs"	Same as "readCoils"
			"writeSingleRegister"   Write "valu" to a single register. Requires "pass".
			"writeSingleCoil"		Write "valu" to a single coil. Requires "pass".
			"readRegRaw"			Read minimally interpreted data from registers, 
										works with undefined registers.
			"getLogItem"			Read log entry. "addr" 0-255.
"count"		Optional, default = 1, max = 10. Number of registers/coils to read. 
				Will start at "addr", and return next "count" defined items, 
				skipping undefined ones. May return fewer if "count" items are unavailable.
"pass"		Password, required for any writes. Defined in code - "imsure"
"valu"		Required for writes. Value to write to register/coil. "on", "true", "off", 
				or "false" for coils. String for registers, code will convert to appropriate
				datatype. All values in decimal.
"back"		Optional. "true" or "false". Mostly for setting coils - does a Javascript 
				"window.history.back()" to return to calling page instead of
				returning data.
"force"		Optional. With writeSingleCoil, bypasses checks if "true".				
==================================================================================				
Commented response to query "/rest?json={"addr":0,"cmd":"readInputRegisters","count":2}"
Definitions are in register and coil csv files (see "csv_file_desc.txt").

{
  "model": "PS_PWM",						// controller model
  "api": "1.0",								// current json api version
  "api_min": "1.0",							// json api backward compatible to this
  "registers": [							// array of registers being returned
    {
      "register": {	
        "addr": 0,							// "addr" of register, zero based, decimal
        "name": "sw_ver",					// register name, as defined in document
        "desc": "Software Version",			// reg. description, as defined
        "valu": "6",						// returned value, interpreted per datatype
        "unit": "-",						// unit for register, as defined
        "type": "bcd",						// datatype, as defined
        "vraw": "0x6"						// uninterpreted raw value, in hex
      }
    },
    {
      "register": {
        "addr": 4,
        "name": "vdd_actual",
        "desc": "3.3V Supply Voltage",
        "valu": "3.27",
        "unit": "V",
        "type": "f16",
        "vraw": "0x428b"
      }
    }
  ]
}

==================================================================================				
Commented response to query "/rest?json={"addr":0,"cmd":"readCoils","count":2}"

{
  "model": "PS_PWM",						// as above
  "api": "1.0",								// "
  "api_min": "1.0",							// "
  "coils": [								// array of coils
    {
      "coil": {	
        "addr": 0,							// address of read coil
        "name": "EqTrig",					// name from csv file
        "desc": "Equalize triggered",		// description from csv file
        "stat": false						// state, "true" or "false"
      }
    },
    {
      "coil": {
        "addr": 1,
        "name": "LoadDis",
        "desc": "Load disconnect if 1",
        "stat": false
      }
    }
  ]
}

==================================================================================				
Examples of response to "getLogItem". No more than 10 faults of each type will be 
reported (prevents json buffer overflow on host).

/rest?json={"addr":0,"cmd":"getLogItem"}

{
  "model": "PS_PWM",
  "api": "1.0",
  "api_min": "1.0",
  "logitems": [
    {
      "logitem": {
        "addr": 0,
        "hourmeter": "44",
        "alarm_daily": "0x10280001",
        "alarms": {
          "1": "RTS Open",
          "2": "Controller Reset",
          "3": "Log Timeout",
          "4": "b28"
        },
        "load_fault_daily": "0x10",
        "load_faults": {
          "1": "HVD"
        },
        "array_fault_daily": "0x0",
        "Vb_min_daily": "12.92187500",
        "Vb_max_daily": "15.16406250",
        "Ahc_daily": "0.00000000",
        "Ahl_daily": "0.00000000",
        "Va_max_daily": "17.95312500",
        "time_ab_daily": "21813",
        "time_eq_daily": "3604",
        "time_fl_daily": "23794"
      }
    }
  ]
}

==================================================================================				
Examples of other responses.

Errors:
{"error": {"code":400,"message":"bad request","info":"bad addr"}}
{"error": {"code":400,"message":"bad request","info":"no password"}}
{"error": {"code":400,"message":"bad request","info":"read only"}}
{"error": {"code":413,"message":"request entity too large","info":"count > 10"}}
{"error": {"code":500,"message":"internal server error","info":"general error"}}
{"error": {"code":504,"message":"gateway timeout","info":"modbus error"}}

Modbus errors:
{"error": {"code":400,"message":"bad request","info":"failure 2"}}   // 2 is the error code

Writes: (will probably change):
{ "writeSingleRegister": "OK" }
{ "writeSingleCoil": "OK" }

